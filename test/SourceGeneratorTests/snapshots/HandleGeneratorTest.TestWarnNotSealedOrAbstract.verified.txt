{
  Generator: {},
  GeneratedSources: [
    {
      HintName: Construct.HandleNotSealedOrAbstract.SampleProject.ValidExamples.g.cs,
      Source:
using SampleProject.FullyGenerated;
#nullable enable
namespace SampleProject.ValidExamples {

internal partial class HandleNotSealedOrAbstract
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("MMKiwi.CBindingSG.SourceGenerator", "0.0.1.000")]
#if NET_7_0_OR_GREATER
    static HandleNotSealedOrAbstract IConstructableHandle<HandleNotSealedOrAbstract>.Construct(bool ownsHandle) => ownsHandle ? new Owns() : new DoesntOwn();
#else
    public static HandleNotSealedOrAbstract Construct(bool ownsHandle) => ownsHandle ? new Owns() : new DoesntOwn();
#endif
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("MMKiwi.CBindingSG.SourceGenerator", "0.0.1.000")]
    public class Owns() : HandleNotSealedOrAbstract(true);
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("MMKiwi.CBindingSG.SourceGenerator", "0.0.1.000")]
    public class DoesntOwn() : HandleNotSealedOrAbstract(false);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("MMKiwi.CBindingSG.SourceGenerator", "0.0.1.000")]
    protected HandleNotSealedOrAbstract(bool ownsHandle): base(ownsHandle) { }
}
}

    }
  ],
  Diagnostics: [
    {
      Id: CBSG00010,
      Title: Handle should be sealed or abstract,
      Severity: Warning,
      WarningLevel: 1,
      Location: : (8,0)-(13,1),
      MessageFormat: Class {0} should be sealed or abstract.,
      Message: Class HandleNotSealedOrAbstract should be sealed or abstract.,
      Category: CBindingSourceGenerator
    }
  ]
}